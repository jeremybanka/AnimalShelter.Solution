@page "/login"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<h2>Login</h2>
<section>
  <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <section>
      <label>Username</label>
      <InputText @bind-Value="model.Username" type="text" />
      <ValidationMessage For="@(() => model.Username)" />
    </section>
    <section>
      <label>Password</label>
      <InputText @bind-Value="model.Password" type="password" class="form-control" />
      <ValidationMessage For="@(() => model.Password)" />
    </section>
    <button class="btn btn-primary">
      @if (loading)
      {
        <span class="spinner-border spinner-border-sm mr-1"></span>
      }
      Login
    </button>
    @if (!string.IsNullOrEmpty(error))
    {
      <div class="alert alert-danger mt-3 mb-0">@error</div>
    }
  </EditForm>
</section>

@code {
  private Model model = new Model();
  private bool loading;
  private string error;

  protected override void OnInitialized()
  {
    // redirect to home if already logged in
    if (AuthenticationService.User != null)
    {
      NavigationManager.NavigateTo("");
    }
  }

  private async void HandleValidSubmit()
  {
    loading = true;
    try
    {
      await AuthenticationService.Login(model.Username, model.Password);
      var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
      NavigationManager.NavigateTo(returnUrl);
    }
    catch (Exception ex)
    {
      error = ex.Message;
      loading = false;
      StateHasChanged();
    }
  }

  private class Model
  {
    [Required]
    public string Username { get; set; }

    [Required]
    public string Password { get; set; }
  }
}