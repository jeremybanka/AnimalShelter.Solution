@page "/register"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager


<div>
  <h1>Register</h1>
  <div class="card-body">
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
      <DataAnnotationsValidator />
      <section>
        <label>Username</label>
        <InputText @bind-Value="model.Username" type="text" />
        <ValidationMessage For="@(() => model.Username)" />
      </section>
      <section>
        <label>First Name</label>
        <InputText @bind-Value="model.FirstName" type="text" />
        <ValidationMessage For="@(() => model.FirstName)" />
      </section>
      <section>
        <label>Last Name</label>
        <InputText @bind-Value="model.LastName" type="text" />
        <ValidationMessage For="@(() => model.LastName)" />
      </section>
      <section>
        <label>Password</label>
        <InputText @bind-Value="model.Password1" type="password" />
        <ValidationMessage For="@(() => model.Password1)" />
      </section>
      <section>
        <label>Password Confirm</label>
        <InputText @bind-Value="model.Password2" type="password" />
        <ValidationMessage For="@(() => model.Password2)" />
      </section>
      <button>
        @if (loading)
        {
          <span class="loading"></span>
        }
        Login
      </button>
      @if (!string.IsNullOrEmpty(error))
      {
        <div class="alert alert-danger mt-3 mb-0">@error</div>
      }
    </EditForm>
  </div>
</div>

@code {
  private Model model = new Model();
  private bool loading;
  private string error;

  protected override void OnInitialized()
  {
    // redirect to home if already logged in
    if (AuthenticationService.User != null)
    {
      NavigationManager.NavigateTo("");
    }
  }

  private async void HandleValidSubmit()
  {
    loading = true;
    try
    {
      await AuthenticationService.Register(
      model.Username,
      model.FirstName,
      model.LastName,
      model.Password1,
      model.Password2
      );
      var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
      NavigationManager.NavigateTo(returnUrl);
    }
    catch (Exception ex)
    {
      error = ex.Message;
      loading = false;
      StateHasChanged();
    }
  }

  private class Model
  {
    [Required] public string FirstName { get; set; }
    [Required] public string LastName { get; set; }
    [Required] public string Username { get; set; }
    [Required] public string Password1 { get; set; }
    [Required] public string Password2 { get; set; }
  }
}